{"remainingRequest":"D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\src\\views\\item\\UseBrand.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\src\\views\\item\\UseBrand.vue","mtime":1575034736923},{"path":"D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: \"my-brand\",\n    data() {\n        return {\n            totalBrands: 0, // 总条数\n            brands: [], // 当前页品牌数据\n            loading: true, // 是否在加载中\n            pagination: {}, // 分页信息\n            headers: [\n                {text: 'id', align: 'center', value: 'id'},\n                {text: '名称', align: 'center', sortable: false, value: 'name'},\n                {text: 'LOGO', align: 'center', sortable: false, value: 'image'},\n                {text: '首字母', align: 'center', value: 'letter', sortable: true,}\n            ]\n        }\n    },\n    mounted(){ // 渲染后执行\n        // 查询数据\n        this.getDataFromServer();\n    },\n    methods:{\n        getDataFromServer() { // 从服务的加载数据的方法。\n            this.$http.get(\"/item/brand/page\",\n                {\n                    params: {\n                        page: this.pagination.page, //页码\n                        rows: this.pagination.rowsPerPage, //页容量\n                        sortBy: this.pagination.sortBy, //根据什么排序\n                        desc: this.pagination.descending, //排序规则,\n                        key: this.key\n                    }\n                }).then(({data}) => {\n                //查询成功后把总的数据赋值给brands和totalBrands\n                this.brands = data.items;\n                this.totalBrands = data.total;\n\n                this.loading = false;\n            }).catch(resp => {\n                this.$message.error(\"分页查询品牌失败\")\n            })\n        },\n        addBrand(){\n            this.dialog = true;\n        },\n        closeWindow(){\n            this.dialog = false;\n        }\n    },\n    watch: { //监视器，判断某个属性或者对象的值是否发生变更，如果发生了变更将会自动的生效（调用handler）\n        pagination: {\n            deep: true,//深度监控，不仅可以监控对象的变化，还可以监控对象内部属性的变化\n            handler() {\n                //等于-1时为一页总元素为所有元素个数(all)\n                if (this.pagination.rowsPerPage === -1) {\n                    this.pagination.rowsPerPage = this.totalBrands\n                }\n                this.getDataFromServer();\n            }\n        },\n        key(){\n            this.getDataFromServer();\n        }\n    }\n}\n",{"version":3,"sources":["UseBrand.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UseBrand.vue","sourceRoot":"src/views/item","sourcesContent":["<template>\r\n    <div>\r\n        <v-data-table\r\n                :headers=\"headers\"\r\n                :items=\"brands\"\r\n                :pagination.sync=\"pagination\"\r\n                :total-items=\"totalBrands\"\r\n                :loading=\"loading\"\r\n                class=\"elevation-1\"\r\n        >\r\n            <template slot=\"items\" slot-scope=\"props\">\r\n                <td>{{ props.item.id }}</td>\r\n                <td class=\"text-xs-center\">{{ props.item.name }}</td>\r\n                <td class=\"text-xs-center\"><img :src=\"props.item.image\"></td>\r\n                <td class=\"text-xs-center\">{{ props.item.letter }}</td>\r\n            </template>\r\n        </v-data-table>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: \"my-brand\",\r\n        data() {\r\n            return {\r\n                totalBrands: 0, // 总条数\r\n                brands: [], // 当前页品牌数据\r\n                loading: true, // 是否在加载中\r\n                pagination: {}, // 分页信息\r\n                headers: [\r\n                    {text: 'id', align: 'center', value: 'id'},\r\n                    {text: '名称', align: 'center', sortable: false, value: 'name'},\r\n                    {text: 'LOGO', align: 'center', sortable: false, value: 'image'},\r\n                    {text: '首字母', align: 'center', value: 'letter', sortable: true,}\r\n                ]\r\n            }\r\n        },\r\n        mounted(){ // 渲染后执行\r\n            // 查询数据\r\n            this.getDataFromServer();\r\n        },\r\n        methods:{\r\n            getDataFromServer() { // 从服务的加载数据的方法。\r\n                this.$http.get(\"/item/brand/page\",\r\n                    {\r\n                        params: {\r\n                            page: this.pagination.page, //页码\r\n                            rows: this.pagination.rowsPerPage, //页容量\r\n                            sortBy: this.pagination.sortBy, //根据什么排序\r\n                            desc: this.pagination.descending, //排序规则,\r\n                            key: this.key\r\n                        }\r\n                    }).then(({data}) => {\r\n                    //查询成功后把总的数据赋值给brands和totalBrands\r\n                    this.brands = data.items;\r\n                    this.totalBrands = data.total;\r\n\r\n                    this.loading = false;\r\n                }).catch(resp => {\r\n                    this.$message.error(\"分页查询品牌失败\")\r\n                })\r\n            },\r\n            addBrand(){\r\n                this.dialog = true;\r\n            },\r\n            closeWindow(){\r\n                this.dialog = false;\r\n            }\r\n        },\r\n        watch: { //监视器，判断某个属性或者对象的值是否发生变更，如果发生了变更将会自动的生效（调用handler）\r\n            pagination: {\r\n                deep: true,//深度监控，不仅可以监控对象的变化，还可以监控对象内部属性的变化\r\n                handler() {\r\n                    //等于-1时为一页总元素为所有元素个数(all)\r\n                    if (this.pagination.rowsPerPage === -1) {\r\n                        this.pagination.rowsPerPage = this.totalBrands\r\n                    }\r\n                    this.getDataFromServer();\r\n                }\r\n            },\r\n            key(){\r\n                this.getDataFromServer();\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}