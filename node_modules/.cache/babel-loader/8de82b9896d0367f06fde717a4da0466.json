{"remainingRequest":"D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\node_modules\\babel-loader\\lib\\index.js!D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\node_modules\\vuetify-loader\\lib\\loader.js!D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\src\\views\\item\\UseBrand.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\src\\views\\item\\UseBrand.vue","mtime":1575201927653},{"path":"D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\heima\\学习视频\\项目及应用\\乐优\\预习\\day03-搭建项目\\笔记\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport BrandForm from \"./BrandForm\";\nexport default {\n  components: {\n    BrandForm: BrandForm\n  },\n  name: \"my-brand\",\n  data: function data() {\n    return {\n      ordBrand: {},\n      isEdit: false,\n      dialog: false,\n      key: \"\",\n      totalBrands: 0,\n      // 总条数\n      brands: [],\n      // 当前页品牌数据\n      loading: true,\n      // 是否在加载中\n      pagination: {},\n      // 分页信息\n      headers: [//默认排序,不排序sortable写为false\n      {\n        text: 'id',\n        align: 'center',\n        value: 'id'\n      }, {\n        text: '名称',\n        align: 'center',\n        sortable: false,\n        value: 'name'\n      }, {\n        text: 'LOGO',\n        align: 'center',\n        sortable: false,\n        value: 'image'\n      }, {\n        text: '首字母',\n        align: 'center',\n        value: 'letter'\n      }, {\n        text: '操作',\n        align: 'center',\n        sortable: false\n      }]\n    };\n  },\n  mounted: function mounted() {\n    // 渲染后执行\n    // 查询数据\n    this.getDataFromServer();\n  },\n  methods: {\n    getDataFromServer: function getDataFromServer() {\n      var _this = this;\n\n      // 从服务的加载数据的方法。\n      this.$http.get(\"/item/brand/page\", {\n        params: {\n          page: this.pagination.page,\n          //页码\n          rows: this.pagination.rowsPerPage,\n          //页容量\n          sortBy: this.pagination.sortBy,\n          //根据什么排序\n          desc: this.pagination.descending,\n          //排序规则,\n          key: this.key\n        }\n      }).then(function (_ref) {\n        var data = _ref.data;\n        //查询成功后把总的数据赋值给brands和totalBrands\n        _this.brands = data.items;\n        _this.totalBrands = data.total;\n        _this.loading = false;\n      }).catch(function (resp) {\n        _this.$message.error(\"分页查询品牌失败\");\n      });\n    },\n    addBrand: function addBrand() {\n      this.dialog = true;\n      this.isEdit = false;\n      this.ordBrand = null;\n    },\n    closeWindow: function closeWindow() {\n      this.dialog = false;\n    },\n    editBrand: function editBrand(ordBrand) {\n      var _this2 = this;\n\n      //在进行数据回显之前，先要，根据品牌id查询分类\n      this.$http.get(\"/item/category/of/brand?id=\" + ordBrand.id).then(function (resp) {\n        //把查询到的分类的数组，赋值给ordBrand中的categories属性\n        ordBrand.categories = resp.data;\n        _this2.dialog = true;\n        _this2.isEdit = true;\n        _this2.ordBrand = ordBrand;\n      }).catch(function (resp) {\n        _this2.$message.error(\"根据品牌查询分类失败\");\n      });\n    },\n    deleteBrand: function deleteBrand(brandId) {\n      var _this3 = this;\n\n      this.$message.confirm(\"您确定要删除?勿以恶小而为之\").then(function (resp) {\n        _this3.$message.success(\"确定\");\n      }).catch(function (resp) {\n        _this3.$message.warning(\"取消\");\n      });\n    }\n  },\n  watch: {\n    //监视器，判断某个属性或者对象的值是否发生变更，如果发生了变更将会自动的生效（调用handler）\n    pagination: {\n      deep: true,\n      //深度监控，不仅可以监控对象的变化，还可以监控对象内部属性的变化\n      handler: function handler() {\n        if (this.pagination.rowsPerPage === -1) {\n          //等于-1时为一页总元素为所有元素个数(all)\n          this.pagination.rowsPerPage = this.totalBrands;\n        }\n\n        this.getDataFromServer();\n      }\n    },\n    key: function key() {\n      this.getDataFromServer();\n    }\n  }\n};",{"version":3,"sources":["UseBrand.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div>\r\n\r\n        <v-card>\r\n            <v-card-title>\r\n                <v-btn class=\"primary\" @click=\"addBrand\">新增品牌</v-btn>\r\n                <v-spacer/>\r\n                <v-text-field label=\"搜索\" append-icon=\"search\" hide-details v-model=\"key\"></v-text-field>\r\n            </v-card-title>\r\n\r\n            <v-divider/>\r\n            <v-data-table\r\n                    :headers=\"headers\"\r\n                    :items=\"brands\"\r\n                    :pagination.sync=\"pagination\"\r\n                    :total-items=\"totalBrands\"\r\n                    :loading=\"loading\"\r\n                    class=\"elevation-1\"\r\n            >\r\n                <template slot=\"items\" slot-scope=\"props\">\r\n                    <td>{{ props.item.id }}</td>\r\n                    <td class=\"text-xs-center\">{{ props.item.name }}</td>\r\n                    <td class=\"text-xs-center\">\r\n\r\n                        <img :src=\"props.item.image\" width=\"120\" height=\"50\" v-if=\"props.item.image\">\r\n                        <span v-else>无</span>\r\n                    </td>\r\n                    <td class=\"text-xs-center\">{{ props.item.letter }}</td>\r\n                    <td class=\"text-xs-center\">\r\n                        <v-btn class=\"info\" @click=\"editBrand(props.item)\">编辑</v-btn>\r\n                        <v-btn class=\"warning\" @click=\"deleteBrand(props.item.id)\">删除</v-btn>\r\n                    </td>\r\n                </template>\r\n            </v-data-table>\r\n        </v-card>\r\n\r\n        <v-dialog v-model=\"dialog\" width=\"500\" persistent>\r\n<!--        :old-brand=\"ordBrand\"    父子通讯，把父中的isEdit以及ordBrand传递给子 -->\r\n            <brand-form @close=\"closeWindow\" :is-edit=\"isEdit\" :old-brand=\"ordBrand\"></brand-form>\r\n        </v-dialog>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\n    import BrandForm from \"./BrandForm\"\r\n\r\n    export default {\r\n        components:{\r\n            BrandForm\r\n        },\r\n        name: \"my-brand\",\r\n        data() {\r\n            return {\r\n                ordBrand:{},\r\n                isEdit:false,\r\n                dialog:false,\r\n                key:\"\",\r\n                totalBrands: 0, // 总条数\r\n                brands: [], // 当前页品牌数据\r\n                loading: true, // 是否在加载中\r\n                pagination: {}, // 分页信息\r\n                headers: [\r\n                    //默认排序,不排序sortable写为false\r\n                    {text: 'id', align: 'center', value: 'id'},\r\n                    {text: '名称', align: 'center', sortable: false, value: 'name'},\r\n                    {text: 'LOGO', align: 'center', sortable: false, value: 'image'},\r\n                    {text: '首字母', align: 'center', value: 'letter'},\r\n                    {text: '操作', align: 'center', sortable: false}\r\n                ]\r\n            }\r\n        },\r\n        mounted() { // 渲染后执行\r\n            // 查询数据\r\n            this.getDataFromServer();\r\n        },\r\n        methods: {\r\n            getDataFromServer() { // 从服务的加载数据的方法。\r\n                this.$http.get(\"/item/brand/page\",\r\n                    {\r\n                        params: {\r\n                            page: this.pagination.page, //页码\r\n                            rows: this.pagination.rowsPerPage, //页容量\r\n                            sortBy: this.pagination.sortBy, //根据什么排序\r\n                            desc: this.pagination.descending, //排序规则,\r\n                            key: this.key\r\n                        }\r\n                    }).then(({data}) => {\r\n                    //查询成功后把总的数据赋值给brands和totalBrands\r\n                    this.brands = data.items;\r\n                    this.totalBrands = data.total;\r\n\r\n                    this.loading = false;\r\n                }).catch(resp => {\r\n                    this.$message.error(\"分页查询品牌失败\")\r\n                })\r\n            },\r\n            addBrand(){\r\n                this.dialog = true;\r\n                this.isEdit = false;\r\n                this.ordBrand = null;\r\n            },\r\n            closeWindow(){\r\n                this.dialog = false;\r\n            },\r\n            editBrand(ordBrand){\r\n\r\n                //在进行数据回显之前，先要，根据品牌id查询分类\r\n\r\n\r\n                this.$http.get(\"/item/category/of/brand?id=\"+ordBrand.id)\r\n                    .then(resp=>{\r\n\r\n                        //把查询到的分类的数组，赋值给ordBrand中的categories属性\r\n                        ordBrand.categories = resp.data;\r\n                        this.dialog = true;\r\n                        this.isEdit = true;\r\n                        this.ordBrand = ordBrand;\r\n                    }).catch(resp=>{\r\n                    this.$message.error(\"根据品牌查询分类失败\")\r\n                })\r\n\r\n\r\n\r\n            },\r\n            deleteBrand(brandId){\r\n\r\n                this.$message.confirm(\"您确定要删除?勿以恶小而为之\")\r\n                    .then(resp=>{\r\n                        this.$message.success(\"确定\")\r\n                    }).catch(resp=>{\r\n                    this.$message.warning(\"取消\")\r\n                })\r\n            }\r\n        },\r\n        watch: { //监视器，判断某个属性或者对象的值是否发生变更，如果发生了变更将会自动的生效（调用handler）\r\n            pagination: {\r\n                deep: true,//深度监控，不仅可以监控对象的变化，还可以监控对象内部属性的变化\r\n                handler() {\r\n                    if (this.pagination.rowsPerPage === -1) {\r\n                        //等于-1时为一页总元素为所有元素个数(all)\r\n                        this.pagination.rowsPerPage = this.totalBrands\r\n                    }\r\n                    this.getDataFromServer();\r\n                }\r\n            },\r\n            key(){\r\n                this.getDataFromServer();\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n\r\n\r\n\r\n"],"sourceRoot":"src/views/item"}]}